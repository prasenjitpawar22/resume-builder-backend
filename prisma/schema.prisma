// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// // relational postgresql 
// // Creating a model called User with the following fields:
// model User {
//   id                String              @id @default(uuid())
//   name              String              
//   email             String              @unique
//   password          String
//   ResumeHeader      ResumeHeader[]
//   ResumeExperience  ResumeExperience[]
//   ResumeEducation   ResumeEducation[]
//   FeatureHeader     FeatureHeader[]
//   FeatureEducation  FeatureEducation[]
//   FeatureExperience FeatureExperience[]
// }

// // Creating a model called ResumeHeader  
// model ResumeHeader {
//   id       String  @unique @default(uuid())
//   user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId   String
//   fullname String
//   contact  String
//   linkedin String?
//   github   String?
//   website  String?
// }

// // Creating a model called ResumeEducation
// model ResumeEducation {
//   id         String    @unique @default(uuid())
//   university String
//   location   String
//   start      DateTime
//   end        DateTime?
//   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
// }

// // Creating a model called ResumeExperience
// model ResumeExperience {
//   id          String   @unique @default(uuid())
//   company     String
//   position    String
//   start       DateTime
//   end         DateTime?
//   current     Boolean?
//   description String[]
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      String
// }

// // ---------------- features models

// model FeatureHeader {
//   id       String  @unique @default(uuid())
//   fullname String
//   contact  String
//   linkedin String?
//   github   String?
//   website  String?
//   user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId   String
// }

// // Creating a model called ResumeEducation
// model FeatureEducation {
//   id         String    @unique @default(uuid())
//   university String
//   location   String
//   start      DateTime
//   end        DateTime?
//   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
// }

// // Creating a model called ResumeExperience
// model FeatureExperience {
//   id          String   @unique @default(uuid())
//   company     String
//   position    String
//   start       DateTime
//   end         DateTime?
//   current     Boolean?
//   description String[]
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      String
// }

// mongodb schema

// Creating a model called User with the following fields:
model User {
  id                String              @id @default(uuid()) @map("_id")
  name              String
  email             String              @unique
  password          String
  ResumeHeader      ResumeHeader[]
  ResumeExperience  ResumeExperience[]
  ResumeEducation   ResumeEducation[]
  FeatureHeader     FeatureHeader[]
  FeatureEducation  FeatureEducation[]
  FeatureExperience FeatureExperience[]
  summary           Summary[]
  Experience        Experience[]
  Skills            Skills[]
  Certification     Certification[]
  Education         Education[]
  Contact           Contact[]
}

// Creating a model called ResumeHeader  
model ResumeHeader {
  id              String         @id @default(uuid()) @map("_id")
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  fullname        String
  contact         String
  linkedin        String?
  github          String?
  website         String?
  featureheader   FeatureHeader? @relation(fields: [featureHeaderId], references: [id], onDelete: Cascade)
  featureHeaderId String?        @unique
  // title           Str 
}

// Creating a model called ResumeEducation
model ResumeEducation {
  id                 String            @id @default(uuid()) @map("_id")
  university         String
  location           String
  start              DateTime
  end                DateTime?
  featureEducation   FeatureEducation? @relation(fields: [featureEducationId], references: [id], onDelete: Cascade)
  featureEducationId String?           @unique
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
}

// Creating a model called ResumeExperience
model ResumeExperience {
  id                  String             @id @default(uuid()) @map("_id")
  company             String
  position            String
  start               DateTime
  end                 DateTime?
  current             Boolean?
  featureExperience   FeatureExperience? @relation(fields: [featureExperienceId], references: [id], onDelete: Cascade)
  featureExperienceId String?            @unique
  description         String[]
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
}

// ---------------- features models--------------- --------------- --------------- --------------- 

model FeatureHeader {
  id           String         @id @default(uuid()) @map("_id")
  fullname     String
  contact      String
  linkedin     String?
  github       String?
  website      String?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  ResumeHeader ResumeHeader[]
}

// Creating a model called ResumeEducation
model FeatureEducation {
  id              String            @id @default(uuid()) @map("_id")
  university      String
  location        String
  start           DateTime
  end             DateTime?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  ResumeEducation ResumeEducation[]
}

// Creating a model called ResumeExperience
model FeatureExperience {
  id               String             @id @default(uuid()) @map("_id")
  company          String
  position         String
  start            DateTime
  end              DateTime?
  current          Boolean?
  description      String[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  ResumeExperience ResumeExperience[]
}

// new schema ***hopefully*** final 
model Summary {
  id      String  @id @default(uuid()) @map("_id")
  summary String
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  show    Boolean @default(true)
}

model Experience {
  id          String    @id @default(uuid()) @map("_id")
  role        String
  company     String
  startYear   DateTime?
  endYear     DateTime?
  present     Boolean?
  location    String?
  achivements String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  show        Boolean   @default(true)
}

model Certification {
  id       String    @id @default(uuid()) @map("_id")
  name     String
  location String?
  year     DateTime?
  helpful  String?
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  show     Boolean   @default(true)
}

model Skills {
  id     String  @id @default(uuid()) @map("_id")
  skill  String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  show   Boolean @default(true)
}

model Education {
  id         String    @id @default(uuid()) @map("_id")
  degree     String
  location   String?
  university String?
  year       DateTime?
  minor      String?
  gpa        String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  show       Boolean   @default(true)
}

model Contact {
  id       String  @id @default(uuid()) @map("_id")
  fullname String?
  phone    String?
  website  String?
  state    String?
  email    String?
  linkedin String?
  country  String?
  city     String?
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  show     Boolean @default(true)
}
