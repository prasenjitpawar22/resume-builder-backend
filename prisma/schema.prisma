// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// // relational postgresql 
// // Creating a model called User with the following fields:
// model User {
//   id                String              @id @default(uuid())
//   name              String              
//   email             String              @unique
//   password          String
//   ResumeHeader      ResumeHeader[]
//   ResumeExperience  ResumeExperience[]
//   ResumeEducation   ResumeEducation[]
//   FeatureHeader     FeatureHeader[]
//   FeatureEducation  FeatureEducation[]
//   FeatureExperience FeatureExperience[]
// }

// // Creating a model called ResumeHeader  
// model ResumeHeader {
//   id       String  @unique @default(uuid())
//   user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId   String
//   fullname String
//   contact  String
//   linkedin String?
//   github   String?
//   website  String?
// }

// // Creating a model called ResumeEducation
// model ResumeEducation {
//   id         String    @unique @default(uuid())
//   university String
//   location   String
//   start      DateTime
//   end        DateTime?
//   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
// }

// // Creating a model called ResumeExperience
// model ResumeExperience {
//   id          String   @unique @default(uuid())
//   company     String
//   position    String
//   start       DateTime
//   end         DateTime?
//   current     Boolean?
//   description String[]
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      String
// }

// // ---------------- features models

// model FeatureHeader {
//   id       String  @unique @default(uuid())
//   fullname String
//   contact  String
//   linkedin String?
//   github   String?
//   website  String?
//   user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId   String
// }

// // Creating a model called ResumeEducation
// model FeatureEducation {
//   id         String    @unique @default(uuid())
//   university String
//   location   String
//   start      DateTime
//   end        DateTime?
//   user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
// }

// // Creating a model called ResumeExperience
// model FeatureExperience {
//   id          String   @unique @default(uuid())
//   company     String
//   position    String
//   start       DateTime
//   end         DateTime?
//   current     Boolean?
//   description String[]
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      String
// }

// mongodb schema

// Creating a model called User with the following fields:
// new schema ***hopefully*** final 
model Summary {
  id      String  @id @default(uuid()) @map("_id")
  summary String
  userId  String
  show    Boolean @default(true)
}

model Experience {
  id          String    @id @default(uuid()) @map("_id")
  role        String
  company     String
  startYear   DateTime?
  endYear     DateTime?
  present     Boolean?
  location    String?
  achivements String?
  userId      String
  show        Boolean   @default(true)
}

model Certification {
  id       String    @id @default(uuid()) @map("_id")
  name     String
  location String?
  year     DateTime?
  helpful  String?
  userId   String
  show     Boolean   @default(true)
}

model Skills {
  id     String  @id @default(uuid()) @map("_id")
  skill  String
  userId String
  show   Boolean @default(true)
}

model Education {
  id         String    @id @default(uuid()) @map("_id")
  degree     String
  location   String?
  university String?
  year       DateTime?
  minor      String?
  gpa        String?
  userId     String
  show       Boolean   @default(true)
}

model Contact {
  id       String  @id @default(uuid()) @map("_id")
  fullname String?
  phone    String?
  website  String?
  state    String?
  email    String?
  linkedin String?
  country  String?
  city     String?
  userId   String
  show     Boolean @default(true)
}
